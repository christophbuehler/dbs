----------------- CREATE TABLES -----------------
CREATE TABLE person (
    id NUMBER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    nachname VARCHAR(20),
    vorname VARCHAR(20),
    dob DATE,
    PRIMARY KEY (id)
);
CREATE TABLE mitarbeiter (
    snr NUMBER NOT NULL,
    person_id NUMBER NOT NULL,
    lohn VARCHAR(20),
    einst_datum DATE,
    PRIMARY KEY (snr),
    FOREIGN KEY (person_id) REFERENCES person ON DELETE CASCADE
);
CREATE TABLE sprache (
    kuerzel VARCHAR(8) NOT NULL,
    ist_rtl NUMBER(1),
    name VARCHAR(20),
    zeichen VARCHAR(20),
    PRIMARY KEY (kuerzel)
);
CREATE TABLE universitaet (
    id NUMBER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(80),
    studierende NUMBER,
    PRIMARY KEY (id)
);
CREATE TABLE autor (
    id NUMBER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    uni_id NUMBER,
    taetig_seit DATE,
    kuerzel VARCHAR(20),
    PRIMARY KEY (id),
    FOREIGN KEY (uni_id) REFERENCES universitaet ON DELETE CASCADE
);
CREATE TABLE autor_hat_sprache (
    autor_id NUMBER NOT NULL,
    sprache_kuerzel VARCHAR(8),
    PRIMARY KEY (autor_id, sprache_kuerzel),
    FOREIGN KEY (autor_id) REFERENCES autor ON DELETE CASCADE,
    FOREIGN KEY (sprache_kuerzel) REFERENCES sprache ON DELETE CASCADE
);
CREATE TABLE post (
    id NUMBER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    uni_id NUMBER, 
    hauptautor_id NUMBER,
    ref_post_id NUMBER,
    sprache_kuerzel VARCHAR(8),
    datum DATE,
    ist_live NUMBER(1),
    likes NUMBER,
    PRIMARY KEY (id, uni_id),
    FOREIGN KEY (hauptautor_id) REFERENCES autor ON DELETE CASCADE,
    FOREIGN KEY (ref_post_id, uni_id) REFERENCES post ON DELETE CASCADE,
    FOREIGN KEY (sprache_kuerzel) REFERENCES sprache ON DELETE CASCADE,
    FOREIGN KEY (uni_id) REFERENCES universitaet ON DELETE CASCADE
);
CREATE TABLE autor_hat_post (
    autor_id NUMBER NOT NULL,
    post_id NUMBER NOT NULL,
    uni_id NUMBER NOT NULL,
    PRIMARY KEY(autor_id, post_id, uni_id),
    FOREIGN KEY (autor_id) REFERENCES autor ON DELETE CASCADE,
    FOREIGN KEY (post_id, uni_id) REFERENCES post ON DELETE CASCADE
);
CREATE TABLE revision (
    post_id NUMBER NOT NULL,
    uni_id NUMBER NOT NULL,
    versnr NUMBER NOT NULL,
    autor_id NUMBER NOT NULL,
    datum DATE,
    titel VARCHAR(80),
    inhalt VARCHAR(4000),
    PRIMARY KEY(post_id, versnr),
    FOREIGN KEY (uni_id) REFERENCES universitaet ON DELETE CASCADE,
	FOREIGN KEY (post_id, uni_id) REFERENCES post ON DELETE CASCADE,
    FOREIGN KEY (autor_id) REFERENCES autor ON DELETE CASCADE
);

----------------- CREATE VIEWS -----------------
CREATE OR REPLACE VIEW REV_POSTS
AS SELECT 
    p.id, r.titel, p.uni_id, r.inhalt, p.datum, a.kuerzel, p.likes
FROM post p
    -- MOST RECFENT REVISION
    INNER JOIN revision r ON r.post_id = p.id
    INNER JOIN
    (
        SELECT post_id, MAX(versnr) maxVers
        FROM revision
        GROUP BY post_id
    ) mx ON mx.post_id = p.id AND r.versnr = mx.maxVers
    
    -- RESOLVE AUTHOR
    INNER JOIN autor a ON a.id = p.hauptautor_id
    
    WHERE
        p.ref_post_id IS NULL
    ORDER BY p.datum DESC;

CREATE OR REPLACE VIEW POST_DISCUSSION
AS SELECT 
    p.id, r.titel, p.uni_id, r.inhalt, p.datum, a.kuerzel, p.likes, p.ref_post_id
FROM post p
    -- MOST RECFENT REVISION
    INNER JOIN revision r ON r.post_id = p.id
    INNER JOIN
    (
        SELECT post_id, MAX(versnr) maxVers
        FROM revision
        GROUP BY post_id
    ) mx ON mx.post_id = p.id AND r.versnr = mx.maxVers
    
    -- RESOLVE AUTHOR
    INNER JOIN autor a ON a.id = p.hauptautor_id
    
    WHERE
        p.ref_post_id IS NOT NULL
    ORDER BY p.datum DESC;


----------------- CREATE PROCEDURES -----------------
CREATE OR REPLACE PROCEDURE INSERT_POST (
       p_hauptautor_id IN POST.hauptautor_id%TYPE,
       p_ref_post_id IN POST.ref_post_id%TYPE,
       p_uni_id IN POST.uni_id%TYPE
) IS
BEGIN
  INSERT INTO POST (hauptautor_id, ref_post_id, uni_id, datum) 
  VALUES (p_hauptautor_id, p_ref_post_id, p_uni_id, CURRENT_DATE);
  COMMIT;
END;